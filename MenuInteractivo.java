import java.util.*;

/**
 * Clase que maneja el men√∫ interactivo para probar los algoritmos.
 * Proporciona una interfaz de usuario amigable para ejecutar y probar
 * las diferentes funciones algor√≠tmicas.
 * 
 * @author Pr√°ctica de Algoritmos
 * @version 1.0
 */
public class MenuInteractivo {
    private final Scanner scanner;

    /**
     * Constructor del men√∫ interactivo.
     */
    public MenuInteractivo() {
        this.scanner = new Scanner(System.in);
    }

    /**
     * Muestra el men√∫ principal y maneja la interacci√≥n del usuario.
     */
    public void mostrarMenu() {
        int opcion = -1;
        
        do {
            mostrarOpciones();
            try {
                opcion = Integer.parseInt(scanner.nextLine().trim());
                procesarOpcion(opcion);
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Error: Por favor ingresa un n√∫mero entero v√°lido.");
            } catch (Exception e) {
                System.out.println("‚ùå Error inesperado: " + e.getMessage());
            }
            System.out.println();
        } while (opcion != 0);
    }

    /**
     * Muestra las opciones del men√∫.
     */
    private void mostrarOpciones() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë           üßÆ MEN√ö PRINCIPAL          ‚ïë");
        System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
        System.out.println("‚ïë 1. üî¢ Contar d√≠gitos pares           ‚ïë");
        System.out.println("‚ïë 2. üìù Verificar pal√≠ndromo           ‚ïë");
        System.out.println("‚ïë 3. üîÑ Verificar capic√∫a              ‚ïë");
        System.out.println("‚ïë 4. üîç Contar ocurrencias en arreglo  ‚ïë");
        System.out.println("‚ïë 5. üé® Reordenar chaquiras           ‚ïë");
        System.out.println("‚ïë 6. üåà Colores √∫nicos en imagen       ‚ïë");
        System.out.println("‚ïë 7. ‚ûï Funciones adicionales          ‚ïë");
        System.out.println("‚ïë 0. üö™ Salir                         ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.print("üëâ Elige una opci√≥n: ");
    }

    /**
     * Procesa la opci√≥n seleccionada por el usuario.
     * 
     * @param opcion la opci√≥n seleccionada
     */
    private void procesarOpcion(int opcion) {
        switch (opcion) {
            case 1 -> probarContarDigitosPares();
            case 2 -> probarPalindromo();
            case 3 -> probarCapicua();
            case 4 -> probarContarOcurrencias();
            case 5 -> probarReordenarChaquiras();
            case 6 -> probarColoresUnicos();
            case 7 -> mostrarFuncionesAdicionales();
            case 0 -> System.out.println("üëã ¬°Hasta luego! Gracias por usar el programa.");
            default -> System.out.println("‚ùå Opci√≥n no v√°lida. Por favor selecciona una opci√≥n del 0 al 7.");
        }
    }

    /**
     * Prueba la funci√≥n de contar d√≠gitos pares.
     */
    private void probarContarDigitosPares() {
        System.out.println("\nüî¢ CONTAR D√çGITOS PARES");
        System.out.print("Ingresa un n√∫mero entero: ");
        try {
            long numero = Long.parseLong(scanner.nextLine().trim());
            int digitosPares = AlgoritmosNumericos.contarDigitosPares(numero);
            System.out.println("‚úÖ Resultado: El n√∫mero " + numero + " tiene " + digitosPares + " d√≠gito(s) par(es)");
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Error: Por favor ingresa un n√∫mero entero v√°lido.");
        }
    }

    /**
     * Prueba la funci√≥n de verificar pal√≠ndromo.
     */
    private void probarPalindromo() {
        System.out.println("\nüìù VERIFICAR PAL√çNDROMO");
        System.out.print("Ingresa una cadena: ");
        String cadena = scanner.nextLine();
        boolean esPalindromo = AlgoritmosCadenas.esPalindromo(cadena);
        System.out.println("‚úÖ Resultado: '" + cadena + "' " + (esPalindromo ? "S√ç" : "NO") + " es pal√≠ndromo");
    }

    /**
     * Prueba la funci√≥n de verificar capic√∫a.
     */
    private void probarCapicua() {
        System.out.println("\nüîÑ VERIFICAR CAPIC√öA");
        System.out.print("Ingresa un n√∫mero entero: ");
        try {
            long numero = Long.parseLong(scanner.nextLine().trim());
            boolean esCapicua = AlgoritmosNumericos.esCapicua(numero);
            System.out.println("‚úÖ Resultado: El n√∫mero " + numero + " " + (esCapicua ? "S√ç" : "NO") + " es capic√∫a");
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Error: Por favor ingresa un n√∫mero entero v√°lido.");
        }
    }

    /**
     * Prueba la funci√≥n de contar ocurrencias.
     */
    private void probarContarOcurrencias() {
        System.out.println("\nüîç CONTAR OCURRENCIAS EN ARREGLO");
        System.out.print("¬øCu√°ntos elementos tendr√° el arreglo?: ");
        try {
            int tamano = Integer.parseInt(scanner.nextLine().trim());
            if (tamano <= 0) {
                System.out.println("‚ùå Error: El tama√±o debe ser mayor a 0.");
                return;
            }
            
            float[] arreglo = new float[tamano];
            for (int i = 0; i < tamano; i++) {
                System.out.print("Elemento " + (i + 1) + ": ");
                arreglo[i] = Float.parseFloat(scanner.nextLine().trim());
            }
            
            System.out.print("¬øQu√© n√∫mero deseas buscar?: ");
            float buscar = Float.parseFloat(scanner.nextLine().trim());
            
            int ocurrencias = AlgoritmosArreglos.contarOcurrencias(arreglo, buscar);
            System.out.println("‚úÖ Resultado: El n√∫mero " + buscar + " aparece " + ocurrencias + " vez(ces) en el arreglo");
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Error: Por favor ingresa un n√∫mero v√°lido.");
        }
    }

    /**
     * Prueba la funci√≥n de reordenar chaquiras.
     */
    private void probarReordenarChaquiras() {
        System.out.println("\nüé® REORDENAR CHAQUIRAS EN PAREJAS");
        System.out.print("¬øCu√°ntos colores?: ");
        try {
            int tamano = Integer.parseInt(scanner.nextLine().trim());
            if (tamano <= 0) {
                System.out.println("‚ùå Error: El tama√±o debe ser mayor a 0.");
                return;
            }
            
            int[] colores = new int[tamano];
            for (int i = 0; i < tamano; i++) {
                System.out.print("Color " + (i + 1) + " (1-5): ");
                int color = Integer.parseInt(scanner.nextLine().trim());
                if (color < 1 || color > 5) {
                    System.out.println("‚ö†Ô∏è Advertencia: Los colores deben estar entre 1 y 5. Usando 1 por defecto.");
                    color = 1;
                }
                colores[i] = color;
            }
            
            int[] parejas = AlgoritmosArreglos.reordenarChaquirasEnParejas(colores);
            System.out.println("‚úÖ Colores originales: " + Arrays.toString(colores));
            System.out.println("‚úÖ Parejas reordenadas: " + Arrays.toString(parejas));
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Error: Por favor ingresa n√∫meros enteros v√°lidos.");
        }
    }

    /**
     * Prueba la funci√≥n de colores √∫nicos en imagen.
     */
    private void probarColoresUnicos() {
        System.out.println("\nüåà COLORES √öNICOS EN IMAGEN");
        try {
            System.out.print("Renglones: ");
            int renglones = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Columnas: ");
            int columnas = Integer.parseInt(scanner.nextLine().trim());
            
            if (renglones <= 0 || columnas <= 0) {
                System.out.println("‚ùå Error: Las dimensiones deben ser mayores a 0.");
                return;
            }
            
            int[] pixeles = new int[renglones * columnas];
            for (int i = 0; i < renglones * columnas; i++) {
                System.out.print("Pixel " + (i + 1) + " (color como entero): ");
                pixeles[i] = Integer.parseInt(scanner.nextLine().trim());
            }
            
            ImagenTeaching imagen = new ImagenTeaching(renglones, columnas, pixeles);
            int[] coloresUnicos = AlgoritmosArreglos.coloresUnicos(imagen);
            
            System.out.println("‚úÖ Imagen creada: " + imagen);
            System.out.println("‚úÖ Colores √∫nicos: " + Arrays.toString(coloresUnicos));
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Error: Por favor ingresa n√∫meros enteros v√°lidos.");
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Error: " + e.getMessage());
        }
    }

    /**
     * Muestra las funciones adicionales disponibles.
     */
    private void mostrarFuncionesAdicionales() {
        System.out.println("\n‚ûï FUNCIONES ADICIONALES");
        System.out.println("Estas son algunas funciones adicionales disponibles:");
        System.out.println("‚Ä¢ AlgoritmosNumericos.sumarDigitos(n)");
        System.out.println("‚Ä¢ AlgoritmosNumericos.contarDigitos(n)");
        System.out.println("‚Ä¢ AlgoritmosNumericos.esPrimo(n)");
        System.out.println("‚Ä¢ AlgoritmosCadenas.invertirCadena(s)");
        System.out.println("‚Ä¢ AlgoritmosCadenas.contarVocales(s)");
        System.out.println("‚Ä¢ AlgoritmosCadenas.contarConsonantes(s)");
        System.out.println("‚Ä¢ AlgoritmosArreglos.encontrarMaximo(arr)");
        System.out.println("‚Ä¢ AlgoritmosArreglos.encontrarMinimo(arr)");
        System.out.println("‚Ä¢ AlgoritmosArreglos.calcularPromedio(arr)");
    }

    /**
     * Cierra el scanner al terminar.
     */
    public void cerrar() {
        scanner.close();
    }
}
